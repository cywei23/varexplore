t1$totalevent <- sum(df$YY)
t1$totalnonevent <- nrow(df)-sum(df$YY)
t1$nonevent <- t1$count - t1$event
t1$mix <- t1$count / nrow(df)
t1$pctevent <- ifelse(t1$totalevent==0, 0, t1$event/t1$totalevent)
t1$pctnonevent <- ifelse(t1$totalnonevent==0, 0,
t1$nonevent/t1$totalnonevent)
t1$eventrate <- t1$event / (t1$nonevent+t1$event)
t1$woe <- ifelse(t1$pctnonevent==0 | t1$pctevent==0, 0,
log(t1$pctevent/t1$pctnonevent))
t1 <- within(t1, iv <- woe * (pctevent-pctnonevent))
t1 <- subset(t1, select = c(var, count, mix, eventrate, woe, iv))
t1 <- t1[with(t1, order(woe)),]
t1 <- rename(t1, c("var" = "Category",
"count" = "Counts", "mix" = "Volume_Mix",
"eventrate" = "Event_Pct",
"woe" = "WOE", "iv" = "IV"))
t <- sqldf("select 'Total' as Category,
sum(Counts) as Counts,
sum(Volume_Mix) as Volume_Mix,
sum(Event_Pct*Volume_Mix) as Event_Pct,
NULL as WOE,
sum(IV) as IV from t1")
t1 <- rbind(t1, t)
gvisTable(t1,
formats = list('Volume_Mix'='#.#%','Event_Pct'='#.##%',
'Counts'='#,###',
'WOE'='#.####', 'IV'='#.####'),
options = list(width=600))
})
# Print R code
output$code <- renderPrint({
# Reactive
df <- dataUpload()
df$var <- df[, paste0(input$product)]
# Create sumarized table
t1 <- data.frame()
t1 <- ddply(df, .(var), summarise, event = sum(YY), count = length(YY))
t1$mix <- t1$count / nrow(df)
t1$totalevent <- sum(df$YY)
t1$totalnonevent <- nrow(df)-sum(df$YY)
t1$nonevent <- t1$count - t1$event
t1$mix <- t1$count / nrow(df)
t1$pctevent <- ifelse(t1$totalevent==0, 0, t1$event/t1$totalevent)
t1$pctnonevent <- ifelse(t1$totalnonevent==0, 0,
t1$nonevent/t1$totalnonevent)
t1$eventrate <- t1$event / (t1$nonevent+t1$event)
t1$woe <- ifelse(t1$pctnonevent==0 | t1$pctevent==0, 0,
log(t1$pctevent/t1$pctnonevent))
t1 <- within(t1, iv <- woe * (pctevent-pctnonevent))
t1 <- subset(t1, select = c(var, count, mix, eventrate, woe, iv))
t1 <- t1[with(t1, order(woe)),]
lines=nrow(t1)
sqlcodetable=as.list(matrix(ncol=0,nrow=0))
sqlcodetable=rbind("select case")
for (k in 1:lines){
sqlcodetable=rbind(sqlcodetable,paste0("when ",
input$product,
"='",
t1[k,1],
"' then ",
t1[k,5]))
}
sqlcodetable=rbind(sqlcodetable,paste0(" end as ", input$product, "_B"))
return(gsub(",","",toString(sqlcodetable)))
})
# Interactive Binning Chart
output$viewLogodds2 <- renderGvis({
# Reactive
df <- dataUpload2()
df$var <- df[, paste0(input$product2)]
selBin <- as.numeric(input$selBin)
# Create sumarized table
df$bin <- round(Rank(df$var) *groups)
t1 <- data.frame()
t1 <- ddply(df, .(bin), summarise, event = sum(YY), count = length(YY))
t2 <- ddply(df, .(bin), summarise, minVal = min(var), maxVal = max(var))
t2 <- subset(t2, select = c(minVal,maxVal))
t1 <- cbind(t1, t2)
t1$bin <- ifelse(is.na(t1$bin), -1, t1$bin)
t1$mix <- t1$count / nrow(df)
t1$totalevent <- sum(df$YY)
t1$totalnonevent <- nrow(df)-sum(df$YY)
t1$nonevent <- t1$count - t1$event
t1 <- t1[with(t1, order(bin)),]
t1$sel <- ifelse(t1$bin %in% selBin, 1, 0)
t1$sel2 <- with(t1, cumsum(sel))
setDT(t1)
setkey(t1, sel2)
t1 <- t1[with(t1, order(sel2, sel)),]
t1[, event := cumsum(event), by=sel2]
t1[, nonevent := cumsum(nonevent), by=sel2]
t1[, count := cumsum(count), by=sel2]
t1$mix <- t1$count / nrow(df)
t1$pctevent <- ifelse(t1$totalevent==0, 0, t1$event/t1$totalevent)
t1$pctnonevent <- ifelse(t1$totalnonevent==0, 0,
t1$nonevent/t1$totalnonevent)
t1$eventrate <- t1$event / (t1$nonevent+t1$event)
t1$woe <- ifelse(t1$pctnonevent==0 | t1$pctevent==0, 0,
log(t1$pctevent/t1$pctnonevent))
t1 <- within(t1, iv <- woe * (pctevent-pctnonevent))
t1 <- within(t1, cutpoint <- ifelse(bin == -1, "Missing",
paste0("<= ", maxVal)))
t1 <- subset(t1, sel == 1)
t1 <- subset(t1, select = c(bin, minVal, cutpoint, count, mix, eventrate,
woe, iv))
t1 <- t1[with(t1, order(bin)),]
#googleVis Combo chart
gvisComboChart(t1, xvar="cutpoint", yvar=c("woe", "mix"),
options=list(curveType="function",
pointSize=7,
seriesType="bars",
series="[{type:'line',
targetAxisIndex:0,
color:'black',
lineWidth: 0.1,
opacity: 0.1},
{type:'bars',
targetAxisIndex:1,
color:'grey'}]",
trendlines="{0: {type: 'polynomial',
color: 'green',
opacity: 0.3}}",
vAxes="[{title:'WOE',
format:'#,###.##',
titleTextStyle: {color: 'black'},
textStyle:{color: 'black'},
textPosition: 'out'},
{title:'% of Total',
format:'#.#%',
titleTextStyle: {color: 'grey'},
textStyle:{color: 'grey'},
textPosition: 'out',
minValue:0}]",
hAxes="[{title:'Cutoff Point',
textPosition: 'out'}]",
height=500
),
chartid="twoaxiscombochart"
)})
# Interactive Binning WOE Table
output$viewWoe2 <- renderGvis({
# Reactive
df <- dataUpload2()
df$var <- df[, paste0(input$product2)]
selBin <- as.numeric(input$selBin)
# Create sumarized table
df$bin <- round(Rank(df$var) *groups)
t1 <- data.frame()
t1 <- ddply(df, .(bin), summarise, event = sum(YY), count = length(YY))
t2 <- ddply(df, .(bin), summarise, minVal = min(var), maxVal = max(var))
t2 <- subset(t2, select = c(minVal,maxVal))
t1 <- cbind(t1, t2)
t1$bin <- ifelse(is.na(t1$bin), -1, t1$bin)
t1$mix <- t1$count / nrow(df)
t1$totalevent <- sum(df$YY)
t1$totalnonevent <- nrow(df)-sum(df$YY)
t1$nonevent <- t1$count - t1$event
t1 <- t1[with(t1, order(bin)),]
t1$sel <- ifelse(t1$bin %in% selBin, 1, 0)
t1$sel2 <- with(t1, cumsum(sel))
setDT(t1)
setkey(t1, sel2)
t1 <- t1[with(t1, order(sel2, sel)),]
t1[, event := cumsum(event), by=sel2]
t1[, nonevent := cumsum(nonevent), by=sel2]
t1[, count := cumsum(count), by=sel2]
t1$mix <- t1$count / nrow(df)
t1$pctevent <- ifelse(t1$totalevent==0, 0, t1$event/t1$totalevent)
t1$pctnonevent <- ifelse(t1$totalnonevent==0, 0, t1$nonevent/t1$totalnonevent)
t1$woe <- ifelse(t1$pctnonevent==0 | t1$pctevent==0, 0,
log(t1$pctevent/t1$pctnonevent))
t1$eventrate <- t1$event / (t1$nonevent+t1$event)
t1 <- within(t1, iv <- woe * (pctevent-pctnonevent))
t1 <- within(t1, cutpoint <- ifelse(bin == -1, "Missing",
paste0("<= ", maxVal)))
t1 <- subset(t1, sel == 1)
t1 <- subset(t1, select = c(bin, minVal, cutpoint, count, mix, eventrate,
woe, iv))
t1 <- t1[with(t1, order(bin)),]
t1 <- rename(t1, c("bin" = "Bin", "minVal" = "Min_Value",
"cutpoint" = "Cutoff_Point",
"count" = "Counts", "mix" = "Volume_Mix",
"eventrate" = "Event_Pct",
"woe" = "WOE", "iv" = "IV"))
t <- sqldf("select NULL as Bin,
NULL as Min_Value,
'Total' as Cutoff_Point,
sum(Counts) as Counts,
sum(Volume_Mix) as Volume_Mix,
sum(Event_Pct*Volume_Mix) as Event_Pct,
NULL as WOE,
sum(IV) as IV from t1")
t1 <- rbind(t1, t)
gvisTable(t1,
formats = list('Volume_Mix'='#.#%','Event_Pct'='#.##%',
'Counts'='#,###', 'Min_Value'='#,###',
'WOE'='#.####', 'IV'='#.####'),
options = list(width=600))
})
# Print R code
output$code2 <- renderPrint({
# Reactive
df <- dataUpload2()
df$var <- df[, paste0(input$product2)]
selBin <- as.numeric(input$selBin)
# Create sumarized table
df$bin <- round(Rank(df$var) *groups)
t1 <- data.frame()
t1 <- ddply(df, .(bin), summarise, event = sum(YY), count = length(YY))
t2 <- ddply(df, .(bin), summarise, minVal = min(var), maxVal = max(var))
t2 <- subset(t2, select = c(minVal,maxVal))
t1 <- cbind(t1, t2)
t1$bin <- ifelse(is.na(t1$bin), -1, t1$bin)
t1$mix <- t1$count / nrow(df)
t1$totalevent <- sum(df$YY)
t1$totalnonevent <- nrow(df)-sum(df$YY)
t1$nonevent <- t1$count - t1$event
t1 <- t1[with(t1, order(bin)),]
t1$sel <- ifelse(t1$bin %in% selBin, 1, 0)
t1$sel2 <- with(t1, cumsum(sel))
setDT(t1)
setkey(t1, sel2)
t1 <- t1[with(t1, order(sel2, sel)),]
t1[, event := cumsum(event), by=sel2]
t1[, nonevent := cumsum(nonevent), by=sel2]
t1[, count := cumsum(count), by=sel2]
t1$mix <- t1$count / nrow(df)
t1$pctevent <- ifelse(t1$totalevent==0, 0, t1$event/t1$totalevent)
t1$pctnonevent <- ifelse(t1$totalnonevent==0, 0,
t1$nonevent/t1$totalnonevent)
t1$woe <- ifelse(t1$pctnonevent==0 | t1$pctevent==0, 0,
log(t1$pctevent/t1$pctnonevent))
t1 <- within(t1, iv <- woe * (pctevent-pctnonevent))
t1 <- within(t1, cutpoint <- ifelse(bin == -1, " is Null",
paste0("<= ", maxVal)))
t1 <- subset(t1, sel == 1)
t1 <- subset(t1, select = c(bin, minVal, cutpoint, count, mix, pctevent,
woe, iv))
t1 <- t1[with(t1, order(bin)),]
t1 <- as.data.frame(t1)
lines=nrow(t1)
sqlcodetable=as.list(matrix(ncol=0,nrow=0))
sqlcodetable=rbind("select case")
for (k in 1:lines){
sqlcodetable=rbind(sqlcodetable,paste0("when ",
input$product2,
t1[k,3],
" ",
"then ",
t1[k,7]))
}
sqlcodetable=rbind(sqlcodetable,paste0(" end as ", input$product2, "_B"))
return(gsub(",","",toString(sqlcodetable)))
})
# Histogram
output$main_plot <- renderPlot({
# Reactive
df <- dataUpload3()
df$var <- df[, paste0(input$product3)]
df <- subset(df, select = c(var))
VarType <- class(df$var)
if (VarType %in% c('integer', 'numeric')) {
# Create Histogram
hist(df$var,
probability = TRUE,
breaks = as.numeric(input$n_breaks),
main = "Numeric Variable Distribution")
if (input$individual_obs) {
rug(df$var)
}
if (input$density) {
dens <- density(df$var,
adjust = input$bw_adjust)
lines(dens, col = "blue")
}
}
else barplot(prop.table(table(df$var)))
})
# Download Data
datasetInput <- reactive({
switch(input$dataset,
"Variable Summary" = Vars,
"Univariate Analysis" = Univars,
"Chi-Square" = Chisq,
"Stats Analysis" = Stats,
"Variable Clustering" = Varclus)
})
output$table <- renderTable({
datasetInput()
})
output$downloadData <- downloadHandler(
filename = function() { paste(input$dataset, '.csv', sep='') },
content = function(file) {
write.csv(datasetInput(), file)
}
)
}
ui <- dashboardPage(
dashboardHeader(title = "Modeling Tools"),
dashboardSidebar(
sidebarMenu(
menuItem("Stats Explore", tabName = "dashboard1",
icon = icon("table")),
menuItem("Variable Clustering", tabName = "dashboard8",
icon = icon("table")),
menuItem("Log-Odds Charts (Numeric)", tabName = "dashboard9",
icon = icon("line-chart")),
menuItem("Log-Odds Charts (Categorical)", tabName = "dashboard2",
icon = icon("bar-chart")),
menuItem("Export", tabName = "dashboard10",
icon = icon("download"))
)
),
dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "dashboard1",
fluidRow(tabBox(
width = 10,
tabPanel("Variable Summary", "", htmlOutput("viewVars"),
p(""),
p("Column Legend: "),
p(class = "text-muted",
"N = Number of observations"),
p(class = "text-muted",
"NValues = Distinct values counts"),
p(class = "text-muted",
"MaxPct = Percent of value with highest frequncy"),
p(class = "text-muted",
"NMiss = Missing counts"),
p(class = "text-muted",
"NMissPct = Missing percent of total"),
p(class = "text-muted",
"NZero = Zero counts"),
p(class = "text-muted",
"NZeroPct = Zero percent of total"),
p(class = "text-muted",
"NSV = Number of Special Value"),
p(class = "text-muted",
"NOutlier = Number of Outliers (over 5 stdev)")),
tabPanel("Univariate Summary", "",
htmlOutput("viewUnivars")),
tabPanel("Chi-Square Summary", "",
htmlOutput("viewChisq")),
tabPanel("Stats Summary (Binned)", "",
htmlOutput("viewStats"))
))),
tabItem(tabName = "dashboard8",
fluidRow(box(width = 10, htmlOutput("viewVarclus")))),
tabItem(tabName = "dashboard9",
fluidRow(box(width = 3,
selectInput("product2", "Select Variable: ",
names(subset(df, select = c(SelVar))))),
box(width = 7,
selectInput('selBin', 'Remove Bins: ',
seq(-1, groups),
selected = seq(-1, groups),
multiple = TRUE, selectize = TRUE))),
fluidRow(box(width = 5,
title = "Log-Odds Chart",
status = "primary",
solidHeader = TRUE,
htmlOutput("viewLogodds2")),
box(width = 5,
title = "WOE Summary",
status = "primary",
solidHeader = TRUE,
htmlOutput("viewWoe2"))),
fluidRow(box(width = 10,
title = "WOE Transformation SQL",
status = "primary",
solidHeader = TRUE,
verbatimTextOutput('code2')))
),
tabItem(tabName = "dashboard2",
fluidRow(box(width = 3,
selectInput("product",
"Select Variable: ",
names(subset(df,
select = c(SelVarC)))))),
fluidRow(box(width = 5,
title = "Log-Odds Chart",
status = "primary",
solidHeader = TRUE,
htmlOutput("viewLogodds")),
box(width = 5,
title = "WOE Summary",
status = "primary",
solidHeader = TRUE,
htmlOutput("viewWoe"))),
fluidRow(box(width = 10,
title = "WOE Transformation SQL",
status = "primary",
solidHeader = TRUE,
verbatimTextOutput('code')))
),
tabItem(tabName = "dashboard10",
pageWithSidebar(
headerPanel('Export to CSV'),
sidebarPanel(
selectInput("dataset", "Choose a dataset:",
choices = c("Variable Summary",
"Univariate Analysis",
"Chi-Square",
"Stats Analysis",
"Variable Clustering")),
downloadButton('downloadData', 'Download')
),
mainPanel(
tableOutput('table')
)
))
),
# Second tab content
tabItem(tabName = "widgets",
h2("Widgets tab content")
)
)
)
shinyApp(ui = ui, server = server)
}
read.csv("lending.csv")
lending <- read.csv("lending.csv")
lending <- read.csv("lending.csv")
lending <- read.csv("lending.csv")
lending <- read.csv("lending.csv")
save(lending)
save(lending, file = 'lending.RData')
lending <- read.csv("lending.csv")
save(lending, file = 'lending.RData')
lending <- read.csv("lending.csv")
lending <- read.csv("lending.csv")
save(lending, file = 'lending.RData')
# To Do:
# 1. Longitudinal Analysis on Variables to decide training timeframe
# 2.
#############################################################################
# LOAD LIBRARIES
#############################################################################
library(foreign)
library(nnet)
library(ggplot2)
library(reshape2)
library(plyr)
library(data.table)
library(caret)
library(xgboost)
library(magrittr)
library(sqldf)
#############################################################################
# FUNCTIONS
#############################################################################
# Multiple Column Transformation Function
num.to.factor <- function(df, cols) {
for (i in cols) {
df[, i] <- as.factor(df[, i])
}
return(df)
}
factor.to.num <- function(df, cols) {
df[,cols] = apply(df[,cols], 2, function(x) as.numeric(as.character(x)))
return(df)
}
# Combine Factor between Train and Test
combine.factor.train <- function(train, test, cols) {
for (i in cols) {
col= as.factor(c(train[,i],test[,i]))
train[,i] = head(col,nrow(train))
test[,i] = tail(col,nrow(test))
}
return(train)
}
combine.factor.test <- function(train, test, cols) {
for (i in cols) {
col= as.factor(c(train[,i],test[,i]))
train[,i] = head(col,nrow(train))
test[,i] = tail(col,nrow(test))
}
return(test)
}
sessions <- read.csv("sessions.csv")
library('devtools')
library(roxygen2)
load_all()
load_all()
load_all()
load_all()
load_all()
load_all()
library(varexplore)
load_all()
library(varexplore)
library(varexplore)
library(varexplore)
library(smbinning) # Load package and its data
data(chileancredit) # Load smbinning sample dataset (Chilean Credit)
chileancredit <- subset(chileancredit,(FlagGB==1 | FlagGB==0))
chileancredit$FlagGB <- ifelse(chileancredit$FlagGB==1, 0, 1)
chileancredit$IncomeLevel <- as.character(chileancredit$IncomeLevel)
setwd("C:/Users/CW/Documents/Dropbox/Data Science/R/Programs")
source("var_explore.R")
runall(chileancredit, "FlagGB", groups = 20)
library(varexplore)
Rank(100)
library(varexplore)
library(varexplore)
use_data()
setwd("~/Documents/Dropbox/R/Packages/varexplore/data")
use_date(lending)
use_data(lending)
library(varexplore)
