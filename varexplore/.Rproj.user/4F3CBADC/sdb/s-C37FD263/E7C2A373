{
    "contents" : "library(caret)\nlibrary(plyr)\nlibrary(ROCR)\nlibrary(ClustOfVar)\nlibrary(reshape)\nlibrary(scales)\nlibrary(data.table)\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(googleVis)\nlibrary(sqldf)\n\n#############################################################################\n# MISCELLENEOUS FUNCTIONS\n#############################################################################\nRank <- function(x) {\n  # Rank function ignore NA\n  #\n  # Args:\n  #   x: vector whose rank function would be applied\n  r <- rank(x) / sum(!is.na(x))\n  r[is.na(x)] <- NA\n  return(r)\n}\n#' Mode function\n#' @param x: Vector\n#' @param na.rm: Remove NA; default = FALSE\n#' @return Mode of x\n#' @export\nMode <- function(x, na.rm = FALSE) {\n  if(na.rm){\n    x = x[!is.na(x)]\n  }\n  ux <- unique(x)\n  return(ux[which.max(tabulate(match(x, ux)))])\n}\n\n#############################################################################\n# VARS\n#############################################################################\n#' Create Variable Summary Table\n#'\n#' Create Variable Summary Table with general rules to drop\n#'   certain variables with low value to model / explore. Act as a primary\n#'   variable selection for the rest of the package functions\n#' @param df Dataframe\n#' @param sv Vector of values user defined and can be detected if unusually\n#' high proportion of the variable has the values; default = c(9999, 99999).\n#' @param maxCatLevel Maximum categorical levels to be excluded in Shiny Dashboard\n#' output; default = 50.\n#' @param maxNumPct Maximum percent of one single value of the variable to be\n#' exlcuded in Shiny Dashboard.\n#' @return Dataframe of variable summary table.\n#' Variable Reduction Rules:\n#'   1. Categorical and more than maxCatLevel (default) 50\n#'   2. Only one value\n#'   3. Numeric variable & one value more than (default) 99%\n#'   4. Missing value more than (default) 99%\n#'   5. Zero value more than 99.5%\n#'   6. Outlier (over 5 standard deviation) more than 99.5%\n#'   7. Special value more than 99.5%\n#' @export\nVars <- function(df,\n                 sv = c(9999, 99999),\n                 maxCatLevel = 50,\n                 maxNumPct = .99) {\n  if (!is.data.frame(df)){  # Check if data.frame\n    return(\"Data is not a data.frame\")\n  } else {\n    Vars <- data.frame()\n    # Loop through all columns\n    for (i in names(df)) {\n      # Create temp column for easier coding\n      df$X <- df[,i]\n      VarType <- class(df$X)\n      # Frequency table by column values\n      t <- data.frame()\n      t <- as.data.frame(ftable(df$X))\n      if (VarType %in% c('integer', 'numeric')) {\n        t$Var1 <- as.numeric(levels(t$Var1))\n      }\n      # Additional stats\n      N <- nrow(df)\n      NwValues <- nrow(subset(df, is.na(X)==FALSE, X))\n      NMiss <- N - NwValues\n      NMissPct <- NMiss / N\n      NZero <- as.numeric(subset(t, Var1 == 0, select = Freq))\n      NZero <- ifelse(is.na(NZero), 0, NZero)\n      NZeroPct <- NZero / N\n      NSV <- ifelse(is.na(t$Freq[t$Var1 %in% sv][1]), 0,\n                    t$Freq[t$Var1 %in% sv][1])\n      if (VarType %in% c('integer', 'numeric')) {\n        mean <- mean(df$X, na.rm = TRUE)\n        min <- min(df$X, na.rm = TRUE)\n        max <- max(df$X, na.rm = TRUE)\n        SDev <- sd(df$X, na.rm = TRUE)\n      } else {\n        mean <- NA\n        min <- NA\n        max <- NA\n        SDev <- NA\n      }\n      low <- mean - 5 * SDev\n      high <- mean + 5 * SDev\n      #t <- t[complete.cases(t),]\n      if (VarType %in% c('integer', 'numeric')) {\n        NOutlier <- sum(t$Freq[t$Var1 < low | t$Var1 > high])\n      }\n      else {\n        NOutlier <- NA\n      }\n      MaxPct <- max(t$Freq)/N\n      NValues <- nrow(subset(t, is.na(Var1) == FALSE, select = Freq))\n      # Variable Selection Rules\n      if (VarType %in% c('character', 'factor', 'Date') &\n          NValues > maxCatLevel) {\n        Drop = 'Y'\n      } else if (NValues == 1) {\n        Drop = 'Y'\n      } else if (VarType %in% c('integer', 'numeric') & MaxPct > maxNumPct) {\n        Drop = 'Y'\n      } else if (NMissPct > maxNumPct) {\n        Drop = 'Y'\n      } else if (NZero/N > .995) {\n        Drop = 'Y'\n      } else if (NSV/N > .995){\n        Drop = 'Y'\n      } else if (VarType %in% c('integer', 'numeric') & NOutlier/N > .995) {\n        Drop = 'Y'\n      } else {\n        Drop = 'N'\n      }\n      # Final Vars Table\n      Vars_temp <- data.frame(var = i, VarType, N, NValues, MaxPct, NMiss,\n                              NMissPct, NZero, NZeroPct, NSV, NOutlier, mean,\n                              min, max, SDev, Drop)\n      Vars <- rbind(Vars, Vars_temp)\n      Vars[is.na(Vars)] <- 0\n    }\n    return(Vars)\n  }\n}\n\n#############################################################################\n# CHISQ\n#############################################################################\n#'Chisq - chi-square and c-stats on non-binned basis\n#'@param df Dataframe\n#'@param Y Binary event variable (0, 1) name. Integer (\\code{Int}) is required.\n#'@param Vars Dataframe of the variable summary table from function Vars().\n#'@return Dataframe of variable chi-square summary.\n#'@export\nChisq <- function(df, Y, Vars) {\n  # Check data frame and formats\n  if (!is.data.frame(df)){ # Check if data.frame\n    return(\"Data is not a data.frame\")\n  } else if (is.numeric(Y)){ # Check if target variable is numeric\n    return(\"Characteristic name not string\")\n  } else if (grepl(\"[.]\",Y)){ # Check if there is a dot\n    return(\"Name of a characteristic must not have a dot [.]\")\n  } else if (max(df[,Y],na.rm=T)!=1){\n    return(\"Maximum not 1\")\n  } else if (min(df[,Y],na.rm=T)!=0){\n    return(\"Minimum not 0\")\n  } else {\n    SelVar <- as.list(t(subset(Vars, Drop == 'N', select = var)))\n    Chisq <- data.frame()\n    for (i in SelVar) {\n      df$YY <- df[[Y]]\n      df$var <- df[[i]]\n\n      # Chi-sqaure test and p-value\n      freq <- table(df[[Y]], df$var)\n      chi <- suppressWarnings(chisq.test(freq))\n      ChiSq <- as.numeric(chi[1])\n      ChiSqP <- as.numeric(chi[3])\n\n      # C, DevC50\n      m<-suppressWarnings(glm(YY~var,data=df,family=binomial()))\n      df$score<-predict(m,type='response',df)\n      pred<-prediction(df$score,df$YY)\n      C <- attr(performance(pred, \"auc\"), 'y.values')[[1]]\n      DevC50 <- abs(C-0.5)\n      perf <- performance(pred,\"tpr\",\"fpr\")\n\n      # Combine all tests\n      Chisq_temp <- data.frame(var = i, ChiSq, ChiSqP, C, DevC50)\n      Chisq <- rbind(Chisq, Chisq_temp)\n      Chisq.sort <- Chisq[with(Chisq, order(-DevC50)), ]\n    }\n    Chisq <- merge(Chisq, Chisq.sort, by.x = \"var\", by.y = \"var\", all.x = TRUE)\n    return(Chisq.sort)\n  }\n}\n\n#############################################################################\n# UNIVARS\n#############################################################################\n#' Univariate Analysis\n#' @param df Dataframe\n#' @param Vars Dataframe of variable summary table from function Vars()\n#' @return Dataframe of univariate summary\n#' @export\nUnivars <- function(df, Vars) {\n  # Check data frame and formats\n  if (!is.data.frame(df)){ # Check if data.frame\n    return(\"Data is not a data.frame\")\n  } else {\n    SelVar <- as.list(t(\n      subset(Vars, Drop == 'N' & VarType %in% c('integer', 'numeric'),\n             select = var)))\n    Univars <- data.frame()\n    for (i in SelVar) {\n      df$var <- df[[i]]\n      NumObs <- nrow(df)\n      NNonMiss <- nrow(subset(df, is.na(var)==FALSE, var))\n      Mean <- mean(df$var, na.rm = TRUE)\n      Median <- mean(df$var, na.rm = TRUE)\n      Max <- max(df$var, na.rm = TRUE)\n      Min <- min(df$var, na.rm = TRUE)\n      Mode <- Mode(df$var, na.rm = TRUE)\n      P1 <- quantile(df$var, .01, na.rm = TRUE)\n      P5 <- quantile(df$var, .05, na.rm = TRUE)\n      #P10 <- quantile(df$var, .10, na.rm = TRUE)\n      #P15 <- quantile(df$var, .15, na.rm = TRUE)\n      #P20 <- quantile(df$var, .20, na.rm = TRUE)\n      P25 <- quantile(df$var, .25, na.rm = TRUE)\n      #P30 <- quantile(df$var, .30, na.rm = TRUE)\n      #P35 <- quantile(df$var, .35, na.rm = TRUE)\n      #P40 <- quantile(df$var, .40, na.rm = TRUE)\n      #P45 <- quantile(df$var, .45, na.rm = TRUE)\n      #P50 <- quantile(df$var, .50, na.rm = TRUE)\n      #P55 <- quantile(df$var, .55, na.rm = TRUE)\n      #P60 <- quantile(df$var, .60, na.rm = TRUE)\n      #P65 <- quantile(df$var, .65, na.rm = TRUE)\n      #P70 <- quantile(df$var, .70, na.rm = TRUE)\n      P75 <- quantile(df$var, .75, na.rm = TRUE)\n      #P80 <- quantile(df$var, .80, na.rm = TRUE)\n      #P85 <- quantile(df$var, .85, na.rm = TRUE)\n      P90 <- quantile(df$var, .90, na.rm = TRUE)\n      P95 <- quantile(df$var, .95, na.rm = TRUE)\n      P99 <- quantile(df$var, .99, na.rm = TRUE)\n      #P100 <- quantile(df$var, 1, na.rm = TRUE)\n      # Combine all tests\n      Univars_temp <- data.frame(var = i, NumObs, NNonMiss, Mean, Median, Mode,\n                                 Max, Min, P1, P5, P25, P75, P90, P95, P99)\n      Univars <- rbind(Univars, Univars_temp)\n    }\n    return(Univars)\n  }\n}\n\n#############################################################################\n# FREQ\n#############################################################################\n#' Categorical Variable Frequency Table\n#' @param df Dataframe\n#' @param Vars Dataframe of Variable Summary Table from function Vars()\n#' @return Dataframe of frequency table\n#' @export\nFreq <- function(df, Vars) {\n  # Check data frame and formats\n  if (!is.data.frame(df)){ # Check if data.frame\n    return(\"Data is not a data.frame\")\n  } else {\n    SelVar <- as.list(t(\n      subset(Vars, Drop == 'N' & !(VarType %in% c('integer', 'numeric')),\n             select = var)))\n    Freq <- data.frame()\n    for (i in SelVar) {\n      df$var <- df[[i]]\n\n      t1 <- ddply(df, .(var), summarise, Freq = length(var))\n      t1$VarName <- i\n      totalcount <- nrow(df)\n      t1$Percent <- t1$Freq / totalcount\n      t1 <- t1[c(3, 1, 2, 4)]\n      t1 <- rename(t1, c(\"var\" = \"VarValue\"))\n\n      # Combine all tests\n      Freq <- rbind(Freq, t1)\n    }\n    return(Freq)\n  }\n}\n\n#############################################################################\n# STATS\n#############################################################################\n# Numeric Variable Stats through testing\nstats_num <- function(df, Y, Vars, groups = 100) {\n  stats_num <- data.frame()\n  SelVar <- as.list(t(\n    subset(Vars, Drop == 'N' & VarType %in% c('integer', 'numeric'),\n           select = var)))\n  totalevent <- sum(df$Y)\n  totalnonevent <- nrow(df)-totalevent\n  for (i in SelVar) {\n    df$var <- df[[i]]\n    df$YY <- df[[Y]]\n\n    df$bin <- round(Rank(df$var) *groups)\n    t1 <- ddply(df, .(bin), summarise, event = sum(YY), count = length(YY))\n\n    # Information Value\n    t1$totalevent <- sum(df$YY)\n    t1$totalnonevent <- nrow(df)-sum(df$YY)\n    t1$nonevent <- t1$count - t1$event\n    t1$pctevent <- ifelse(t1$totalevent==0, 0, t1$event/t1$totalevent)\n    t1$pctnonevent <- ifelse(t1$totalnonevent==0, 0,\n                             t1$nonevent/t1$totalnonevent)\n    t1$woe <- ifelse(t1$pctnonevent==0 | t1$pctevent==0, 0,\n                     log(t1$pctevent/t1$pctnonevent))\n    t1 <- within(t1, iv <- woe * (pctevent-pctnonevent))\n    iv <- sum(t1$iv)\n    bins <- nrow(t1)\n\n    # Chi-sqaure test and p-value\n    freq <- table(df$YY, df$bin)\n    chi <- suppressWarnings(chisq.test(freq))\n    chisq <- as.numeric(chi[1])\n    pvalue <- as.numeric(chi[3])\n\n    # ROC, Gini and KS\n    m<-suppressWarnings(glm(YY~var,data=df,family=binomial()))\n    df$score<-predict(m,type='response',df)\n    pred<-prediction(df$score,df$YY)\n    perf <- performance(pred,\"tpr\",\"fpr\")\n    c <- attr(performance(pred, \"auc\"), 'y.values')[[1]]\n    c50 <- abs(c-0.5)\n    gini <- c50*2\n\n    pred<-prediction(df$score,df$YY)\n    perf <- performance(pred,\"tpr\",\"fpr\")\n    ks <- max(attr(perf,'y.values')[[1]]-attr(perf,'x.values')[[1]])\n    df.sort <- df[with(df, order(score)),]\n    df.sort$cnt <- 1\n    df.sort$cnt <- with(df.sort, cumsum(cnt))\n    df.sort$YYY <- ifelse(is.na(df.sort$var), NA, df.sort$YY)\n    df.sort$YYYY <- ifelse(df.sort$YY==1, 0, 1)\n    noneventcnt <- sum(df.sort$YYYY, na.rm=TRUE)\n    df.sort$pred <- ifelse(df.sort$cnt <noneventcnt , 0, 1)\n    misclassrate <- mean(ifelse(df.sort$pred==df.sort$YY, 0, 1), na.rm=TRUE)\n\n    # Combine all tests\n    stats_num_temp <- data.frame(var = i, bins, c, c50, gini, ks, chisq, pvalue,\n                                 misclassrate, iv)\n    stats_num <- rbind(stats_num, stats_num_temp)\n  }\n  return(stats_num)\n}\n# Character variable stats testing\nstats_char <- function(df, Y, Vars, groups = 100) {\n  stats_char <- data.frame()\n  SelVar <- as.list(t(\n    subset(Vars, Drop == 'N' & !(VarType %in% c('integer', 'numeric')),\n           select = var)))\n  totalevent <- sum(df$Y)\n  totalnonevent <- nrow(df)-totalevent\n  for (i in SelVar) {\n    df$var <- df[[i]]\n    df$YY <- df[[Y]]\n\n    t1 <- ddply(df, .(var), summarise, mean = mean(YY), event = sum(YY),\n                count = length(YY))\n    t1$bin <- round(Rank(t1$mean) *groups)\n    df2 <- merge(df, t1, by.x = \"var\", by.y = \"var\", all.x = TRUE)\n\n    # Information Value\n    t1$totalevent <- sum(df$YY)\n    t1$totalnonevent <- nrow(df)-sum(df$YY)\n    t1$nonevent <- t1$count - t1$event\n    t1$pctevent <- ifelse(t1$totalevent==0, 0, t1$event/t1$totalevent)\n    t1$pctnonevent <- ifelse(t1$totalnonevent==0, 0,\n                             t1$nonevent/t1$totalnonevent)\n    t1$woe <- ifelse(t1$pctnonevent==0 | t1$pctevent==0, 0,\n                     log(t1$pctevent/t1$pctnonevent))\n    t1 <- within(t1, iv <- woe * (pctevent-pctnonevent))\n    iv <- sum(t1$iv)\n    bins <- nrow(t1)\n\n    # Chi-sqaure test and p-value\n    freq <- table(df2$YY, df2$bin)\n    chi <- suppressWarnings(chisq.test(freq))\n    chisq <- as.numeric(chi[1])\n    pvalue <- as.numeric(chi[3])\n\n    # ROC, Gini and KS\n    m<-suppressWarnings(glm(YY~factor(var),data=df2,family=binomial()))\n    df2$score<-predict(m,type='response',df2)\n    pred<-prediction(df2$score,df2$YY)\n    perf <- performance(pred,\"tpr\",\"fpr\")\n    c <- attr(performance(pred, \"auc\"), 'y.values')[[1]]\n    c50 <- abs(c-0.5)\n    gini <- c50*2\n\n    pred<-prediction(df2$score,df2$YY)\n    perf <- performance(pred,\"tpr\",\"fpr\")\n    ks <- max(attr(perf,'y.values')[[1]]-attr(perf,'x.values')[[1]])\n    df2.sort <- df2[with(df2, order(score)),]\n    df2.sort$cnt <- 1\n    df2.sort$cnt <- with(df2.sort, cumsum(cnt))\n    df2.sort$YYY <- ifelse(is.na(df2.sort$var), NA, df2.sort$YY)\n    df2.sort$YYYY <- ifelse(df2.sort$YY==1, 0, 1)\n    noneventcnt <- sum(df2.sort$YYYY, na.rm=TRUE)\n    df2.sort$pred <- ifelse(df2.sort$cnt <noneventcnt , 0, 1)\n    misclassrate <- mean(ifelse(df2.sort$pred==df2.sort$YY, 0, 1), na.rm=TRUE)\n\n    m<-suppressWarnings(glm(YY~var,data=df,family=binomial()))\n    df$score<-predict(m,type='response',df)\n    pred<-prediction(df$score,df$YY)\n    C <- attr(performance(pred, \"auc\"), 'y.values')[[1]]\n    DevC50 <- abs(C-0.5)\n    perf <- performance(pred,\"tpr\",\"fpr\")\n    # Combine all tests\n    stats_char_temp <- data.frame(var = i, bins, c, c50, gini, ks, chisq,\n                                  pvalue, misclassrate, iv)\n    stats_char <- rbind(stats_char, stats_char_temp)\n  }\n  return(stats_char)\n}\n# Combine numeric and character results\n#' Statistical Analysis Summary\n#' @param df Dataframe\n#' @param Y Binary event variable (0, 1) name. Integer (\\code{Int}) is required.\n#' @param Vars Dataframe of Variable Summary Table from function Vars()\n#' @return Dataframe of statistical summary\n#' @export\nStats <- function(df, Y, Vars) {\n  # Check data frame and formats\n  if (!is.data.frame(df)){ # Check if data.frame\n    return(\"Data is not a data.frame\")\n  } else if (is.numeric(Y)){ # Check if target variable is numeric\n    return(\"Characteristic name not string\")\n  } else if (grepl(\"[.]\",Y)){ # Check if there is a dot\n    return(\"Name of a characteristic must not have a dot [.]\")\n  } else if (max(df[,Y],na.rm=T)!=1){\n    return(\"Maximum not 1\")\n  } else if (min(df[,Y],na.rm=T)!=0){\n    return(\"Minimum not 0\")\n  } else {\n    stats_num <- stats_num(df, Y, Vars)\n    stats_char <- stats_char(df, Y, Vars)\n    stats <- rbind(stats_num, stats_char)\n    stats.sort <- stats[with(stats, order(-c50)),]\n    return(stats.sort)\n  }\n}\n\n#############################################################################\n# VARCLUS\n#############################################################################\n#' Variable Clustering Analysis\n#' @param df Dataframe\n#' @param Y Binary event variable (0, 1) name. Integer (\\code{Int}) is required.\n#' @param maxEigenValue Eigen value cutoff, defualt = 0.7.\n#' @return Dataframe of Variable Cluster Analysis results.\n#' @export\nVarclus <- function(df, Y, Vars, maxEigenValue = 0.7) {\n  # Check data frame and formats\n  if (!is.data.frame(df)){ # Check if data.frame\n    return(\"Data is not a data.frame\")\n  } else if (is.numeric(Y)){ # Check if target variable is numeric\n    return(\"Characteristic name not string\")\n  } else if (grepl(\"[.]\",Y)){ # Check if there is a dot\n    return(\"Name of a characteristic must not have a dot [.]\")\n  } else if (max(df[,Y],na.rm=T)!=1){\n    return(\"Maximum not 1\")\n  } else if (min(df[,Y],na.rm=T)!=0){\n    return(\"Minimum not 0\")\n  } else {\n    # selected variable only\n    SelVar <- as.vector(t(subset(Vars, Drop == 'N', select = var)))\n    df1 <- subset(df, select = c(SelVar))\n\n    # Drop dependent variable\n    df1 <- df1[, !(names(df1) %in% Y)]\n    SelVar <- names(df1)\n\n    # transform to matrix for hclustvar function\n    df1 <- data.matrix(df1)\n\n    # ClustOfVar package for Tree based Variable Clustering\n    # Use maxEigenValue to stop at semi-optimal number of clusters\n    tree <- hclustvar(df1)\n    NumClust <- sum(tree$height > maxEigenValue) + 1\n    P <- cutreevar(tree, k = NumClust, matsim = TRUE)\n    t <- P$var\n    scores <- as.data.frame(P$scores)\n    tdf <- rename(melt.list(t), c(\"X1\" = \"var\", \"value\" = \"RSquareOwnCluster\",\n                                  \"L1\" = \"cluster\"))\n    tdf <- subset(tdf, select = -c(X2))\n    tdf <- tdf[, c(3, 1, 2)]\n\n    # Algoritm to mimic SAS Proc Varclus with closest cluster R-squared value to\n    # select best variable within cluster\n    RSquare <- data.frame()\n    SelVar <- as.vector(t(subset(Vars, Drop == 'N', select = var)))\n    df1 <- subset(df, select = c(SelVar))\n    df1 <- df1[, !(names(df1) %in% Y)]\n    SelVar <- names(df1)\n    for (i in SelVar) {\n      df2 <- df1[[i]]\n      cluster <- as.numeric(substr(tdf[which(tdf$var == i), 1], 8, 10000))\n      scores_temp <- scores[,-c(cluster)]\n      m <- cbind(df2, scores_temp)\n\n      m <- data.matrix(m)\n      m <- as.data.frame(cor(m, use = \"na.or.complete\"))\n      RSquareClosestCluster <- max((m[which(m$df2 !=1),1])^2)\n      RSquare_temp <- data.frame(var2 = i, RSquareClosestCluster)\n      RSquare <- rbind(RSquare, RSquare_temp)\n    }\n\n    # generate final dataset and calculate 1-Rsquared Ratio\n    tdf <- subset(cbind(tdf, RSquare), select = -c(var2))\n    tdf$RSquareRatio <- (1-tdf$RSquareOwnCluster) /\n      (1-tdf$RSquareClosestCluster)\n    tdf$cluster <- as.numeric(substr(tdf$cluster, 8, 10000))\n    tdf <- tdf[with(tdf, order(cluster, RSquareRatio)),]\n    return(tdf)\n  }\n}\n\n#############################################################################\n# RUNALL\n#############################################################################\n#' Building a set of variable explore tools mainly for binary prediction.\n#'\n#' Output into Shiny Dashboard for user interaction, especially numeric\n#' variable binning and WOE summary with SQL codes available for transformation.\n#'\n#' @param df Dataframe\n#' @param Y Binary event variable (0, 1) name. Integer (\\code{Int}) is required.\n#' @param groups Integer variable for default grouping in numeric variable.\n#' Default is 20 groups / bins\n#' @return Generate a Shiny Dashboard object containing 5 tabs: Variable\n#' Summary, Variable Clustering, Log-Odds Charts for numeric variables\n#' interactive binning, Log-Odds Charts for categorical variables, and export\n#' results to CSV file format\n#' @export\nvarexplore <- function(df, Y, groups = 20) {\n  #Create Summaries\n  Vars <- Vars(df)\n  Univars <- Univars(df, Vars)\n  Freq <- Freq(df, Vars)\n  Chisq <- Chisq(df, Y, Vars)\n  Stats <- Stats(df, Y, Vars)\n  Varclus <- Varclus(df, Y, Vars)\n  SelVar <- t(subset(Vars, Drop == 'N' & VarType %in% c('integer', 'numeric'),\n                     select = var))\n  SelVarC <- t(subset(Vars, Drop == 'N' & VarType %in% c('character', 'factor',\n                                                         'Date'), select = var))\n  SelVarA <- t(subset(Vars, Drop == 'N', select = var))\n  df1 <- df\n  df1$YY <- df[[Y]]\n  server <- function(input, output, session) {\n    # Reactive\n    dataUpload<-reactive({\n      # Selected Variable and Numeric Only for interactive binning\n      SelVarc <- t(subset(Vars, Drop == 'N' & VarType %in% c('character',\n                                                             'factor', 'Date'),\n                          select = var))\n      df <- subset(df, select = c(SelVarC))\n      updateSelectInput(session, \"product\", choices = names(df))\n      df$YY <- df1$YY\n      return(df)\n    })\n    dataUpload2<-reactive({\n      # Selected Variable and Numeric Only for interactive binning\n      SelVar <- t(subset(Vars, Drop == 'N' & VarType %in% c('integer',\n                                                            'numeric'),\n                         select = var))\n      df <- subset(df, select = c(SelVar))\n      updateSelectInput(session, \"product2\", choices = names(df))\n      df$YY <- df1$YY\n      return(df)\n    })\n    dataUpload3<-reactive({\n      # Selected Variable and Numeric Only for histogram\n      SelVar <- t(subset(Vars, Drop == 'N', select = var))\n      df <- subset(df, select = c(SelVar))\n      updateSelectInput(session, \"product3\", choices = names(df))\n      df$YY <- df1$YY\n      return(df)\n    })\n\n    # Render\n    output$viewVars <- renderGvis(\n      {gvisTable(Vars,\n                 formats = list('MaxPct'='#.#%', 'NMissPct'='#.#%',\n                                'NZeroPct'='#.#%',\n                                'N'='#,###.##', 'NValues'='#,###.##',\n                                'NMiss'='#,###.##', 'NZero'='#,###.##',\n                                'NSV'='#,###.##', 'NOutlier'='#,###.##',\n                                'mean'='#,###.##', 'min'='#,###.##',\n                                'max'='#,###.##', 'SDev'='#,###.##'))})\n    output$viewUnivars <- renderGvis(\n      {gvisTable(Univars,\n                 formats = list(NumObs = '#,###.##', NNonMiss = '#,###.##',\n                                Mean = '#,###.##', Median = '#,###.##',\n                                Mode = '#,###.##', Max = '#,###.##',\n                                Min = '#,###.##', P1 = '#,###.##',\n                                P5 = '#,###.##', P25 = '#,###.##',\n                                P75 = '#,###.##', P90 = '#,###.##',\n                                P95 = '#,###.##', P99 = '#,###.##'))})\n    output$viewChisq <- renderGvis(\n      {gvisTable(Chisq,\n                 formats = list(ChiSq = '#,###.##', ChiSqP = '#.####',\n                                C = '#.####', DevC50 = '#.####'))})\n    output$viewStats <- renderGvis(\n      {gvisTable(Stats,\n                 formats = list(c = '#.####', c50 = '#.####', gini = '#.####',\n                                ks = '#.####', chisq = '#,###.##',\n                                pvalue = '#.####', misclassrate = '#.####',\n                                iv = '#.####'))})\n    output$viewFreq <- renderGvis(\n      {gvisTable(Freq)})\n    output$viewVarclus <- renderGvis(\n      {gvisTable(Varclus,\n                 formats = list(RSquareOwnCluster = '#.####',\n                                RSquareClosestCluster = '#.####',\n                                RSquareRatio = '#.####'))})\n    # Categorical Variable Logodds Charts\n    output$viewLogodds <- renderGvis({\n      # Reactive\n      df <- dataUpload()\n      df$var <- df[, paste0(input$product)]\n      # Create sumarized table\n      t1 <- data.frame()\n      t1 <- ddply(df, .(var), summarise, event = sum(YY), count = length(YY))\n      t1$mix <- t1$count / nrow(df)\n      t1$totalevent <- sum(df$YY)\n      t1$totalnonevent <- nrow(df)-sum(df$YY)\n      t1$nonevent <- t1$count - t1$event\n      t1$mix <- t1$count / nrow(df)\n      t1$pctevent <- ifelse(t1$totalevent==0, 0, t1$event/t1$totalevent)\n      t1$pctnonevent <- ifelse(t1$totalnonevent==0, 0,\n                               t1$nonevent/t1$totalnonevent)\n      t1$eventrate <- t1$event / (t1$nonevent+t1$event)\n      t1$woe <- ifelse(t1$pctnonevent==0 | t1$pctevent==0, 0,\n                       log(t1$pctevent/t1$pctnonevent))\n      t1 <- within(t1, iv <- woe * (pctevent-pctnonevent))\n      t1 <- subset(t1, select = c(var, count, mix, eventrate, woe, iv))\n      t1 <- t1[with(t1, order(woe)),]\n      #googleVis Combo chart\n      gvisComboChart(t1, xvar=\"var\", yvar=c(\"woe\", \"mix\"),\n                     options=list(curveType=\"function\",\n                                  pointSize=7,\n                                  seriesType=\"bars\",\n                                  series=\"[{type:'line',\n                                  targetAxisIndex:0,\n                                  color:'black',\n                                  lineWidth: 0.1,\n                                  opacity: 0.1},\n                                  {type:'bars',\n                                  targetAxisIndex:1,\n                                  color:'grey'}]\",\n                                  trendlines=\"{0: {type: 'polynomial',\n                                  color: 'green',\n                                  opacity: 0.3}}\",\n                                  vAxes=\"[{title:'WOE',\n                                  format:'#,###.##',\n                                  titleTextStyle: {color: 'black'},\n                                  textStyle:{color: 'black'},\n                                  textPosition: 'out'},\n                                  {title:'% of Total',\n                                  format:'#,###%',\n                                  titleTextStyle: {color: 'grey'},\n                                  textStyle:{color: 'grey'},\n                                  textPosition: 'out',\n                                  minValue:0}]\",\n                                  hAxes=\"[{title:'Cutoff Point',\n                                  textPosition: 'out'}]\",\n                                  height=500\n                     ),\n                     chartid=\"twoaxiscombochart\"\n      )})\n    # Interactive Binning WOE Table\n    output$viewWoe <- renderGvis({\n      # Reactive\n      df <- dataUpload()\n      df$var <- df[, paste0(input$product)]\n      # Create sumarized table\n      t1 <- data.frame()\n      t1 <- ddply(df, .(var), summarise, event = sum(YY), count = length(YY))\n      t1$mix <- t1$count / nrow(df)\n      t1$totalevent <- sum(df$YY)\n      t1$totalnonevent <- nrow(df)-sum(df$YY)\n      t1$nonevent <- t1$count - t1$event\n      t1$mix <- t1$count / nrow(df)\n      t1$pctevent <- ifelse(t1$totalevent==0, 0, t1$event/t1$totalevent)\n      t1$pctnonevent <- ifelse(t1$totalnonevent==0, 0,\n                               t1$nonevent/t1$totalnonevent)\n      t1$eventrate <- t1$event / (t1$nonevent+t1$event)\n      t1$woe <- ifelse(t1$pctnonevent==0 | t1$pctevent==0, 0,\n                       log(t1$pctevent/t1$pctnonevent))\n      t1 <- within(t1, iv <- woe * (pctevent-pctnonevent))\n      t1 <- subset(t1, select = c(var, count, mix, eventrate, woe, iv))\n      t1 <- t1[with(t1, order(woe)),]\n      t1 <- rename(t1, c(\"var\" = \"Category\",\n                         \"count\" = \"Counts\", \"mix\" = \"Volume_Mix\",\n                         \"eventrate\" = \"Event_Pct\",\n                         \"woe\" = \"WOE\", \"iv\" = \"IV\"))\n      t <- sqldf(\"select 'Total' as Category,\n                 sum(Counts) as Counts,\n                 sum(Volume_Mix) as Volume_Mix,\n                 sum(Event_Pct*Volume_Mix) as Event_Pct,\n                 NULL as WOE,\n                 sum(IV) as IV from t1\")\n      t1 <- rbind(t1, t)\n      gvisTable(t1,\n                formats = list('Volume_Mix'='#.#%','Event_Pct'='#.##%',\n                               'Counts'='#,###',\n                               'WOE'='#.####', 'IV'='#.####'),\n                options = list(width=600))\n    })\n    # Print R code\n    output$code <- renderPrint({\n      # Reactive\n      df <- dataUpload()\n      df$var <- df[, paste0(input$product)]\n      # Create sumarized table\n      t1 <- data.frame()\n      t1 <- ddply(df, .(var), summarise, event = sum(YY), count = length(YY))\n      t1$mix <- t1$count / nrow(df)\n      t1$totalevent <- sum(df$YY)\n      t1$totalnonevent <- nrow(df)-sum(df$YY)\n      t1$nonevent <- t1$count - t1$event\n      t1$mix <- t1$count / nrow(df)\n      t1$pctevent <- ifelse(t1$totalevent==0, 0, t1$event/t1$totalevent)\n      t1$pctnonevent <- ifelse(t1$totalnonevent==0, 0,\n                               t1$nonevent/t1$totalnonevent)\n      t1$eventrate <- t1$event / (t1$nonevent+t1$event)\n      t1$woe <- ifelse(t1$pctnonevent==0 | t1$pctevent==0, 0,\n                       log(t1$pctevent/t1$pctnonevent))\n      t1 <- within(t1, iv <- woe * (pctevent-pctnonevent))\n      t1 <- subset(t1, select = c(var, count, mix, eventrate, woe, iv))\n      t1 <- t1[with(t1, order(woe)),]\n      lines=nrow(t1)\n      sqlcodetable=as.list(matrix(ncol=0,nrow=0))\n      sqlcodetable=rbind(\"select case\")\n      for (k in 1:lines){\n        sqlcodetable=rbind(sqlcodetable,paste0(\"when \",\n                                               input$product,\n                                               \"='\",\n                                               t1[k,1],\n                                               \"' then \",\n                                               t1[k,5]))\n      }\n      sqlcodetable=rbind(sqlcodetable,paste0(\" end as \", input$product, \"_B\"))\n      return(gsub(\",\",\"\",toString(sqlcodetable)))\n    })\n    # Interactive Binning Chart\n    output$viewLogodds2 <- renderGvis({\n      # Reactive\n      df <- dataUpload2()\n      df$var <- df[, paste0(input$product2)]\n      selBin <- as.numeric(input$selBin)\n      # Create sumarized table\n      df$bin <- round(Rank(df$var) *groups)\n      t1 <- data.frame()\n      t1 <- ddply(df, .(bin), summarise, event = sum(YY), count = length(YY))\n      t2 <- ddply(df, .(bin), summarise, minVal = min(var), maxVal = max(var))\n      t2 <- subset(t2, select = c(minVal,maxVal))\n      t1 <- cbind(t1, t2)\n      t1$bin <- ifelse(is.na(t1$bin), -1, t1$bin)\n      t1$mix <- t1$count / nrow(df)\n      t1$totalevent <- sum(df$YY)\n      t1$totalnonevent <- nrow(df)-sum(df$YY)\n      t1$nonevent <- t1$count - t1$event\n      t1 <- t1[with(t1, order(bin)),]\n\n      t1$sel <- ifelse(t1$bin %in% selBin, 1, 0)\n      t1$sel2 <- with(t1, cumsum(sel))\n      setDT(t1)\n      setkey(t1, sel2)\n      t1 <- t1[with(t1, order(sel2, sel)),]\n      t1[, event := cumsum(event), by=sel2]\n      t1[, nonevent := cumsum(nonevent), by=sel2]\n      t1[, count := cumsum(count), by=sel2]\n      t1$mix <- t1$count / nrow(df)\n      t1$pctevent <- ifelse(t1$totalevent==0, 0, t1$event/t1$totalevent)\n      t1$pctnonevent <- ifelse(t1$totalnonevent==0, 0,\n                               t1$nonevent/t1$totalnonevent)\n      t1$eventrate <- t1$event / (t1$nonevent+t1$event)\n      t1$woe <- ifelse(t1$pctnonevent==0 | t1$pctevent==0, 0,\n                       log(t1$pctevent/t1$pctnonevent))\n      t1 <- within(t1, iv <- woe * (pctevent-pctnonevent))\n      t1 <- within(t1, cutpoint <- ifelse(bin == -1, \"Missing\",\n                                          paste0(\"<= \", maxVal)))\n      t1 <- subset(t1, sel == 1)\n      t1 <- subset(t1, select = c(bin, minVal, cutpoint, count, mix, eventrate,\n                                  woe, iv))\n      t1 <- t1[with(t1, order(bin)),]\n      #googleVis Combo chart\n      gvisComboChart(t1, xvar=\"cutpoint\", yvar=c(\"woe\", \"mix\"),\n                     options=list(curveType=\"function\",\n                                  pointSize=7,\n                                  seriesType=\"bars\",\n                                  series=\"[{type:'line',\n                                  targetAxisIndex:0,\n                                  color:'black',\n                                  lineWidth: 0.1,\n                                  opacity: 0.1},\n                                  {type:'bars',\n                                  targetAxisIndex:1,\n                                  color:'grey'}]\",\n                                  trendlines=\"{0: {type: 'polynomial',\n                                  color: 'green',\n                                  opacity: 0.3}}\",\n                                  vAxes=\"[{title:'WOE',\n                                  format:'#,###.##',\n                                  titleTextStyle: {color: 'black'},\n                                  textStyle:{color: 'black'},\n                                  textPosition: 'out'},\n                                  {title:'% of Total',\n                                  format:'#.#%',\n                                  titleTextStyle: {color: 'grey'},\n                                  textStyle:{color: 'grey'},\n                                  textPosition: 'out',\n                                  minValue:0}]\",\n                                  hAxes=\"[{title:'Cutoff Point',\n                                  textPosition: 'out'}]\",\n                                  height=500\n                     ),\n                     chartid=\"twoaxiscombochart\"\n      )})\n    # Interactive Binning WOE Table\n    output$viewWoe2 <- renderGvis({\n      # Reactive\n      df <- dataUpload2()\n      df$var <- df[, paste0(input$product2)]\n      selBin <- as.numeric(input$selBin)\n      # Create sumarized table\n      df$bin <- round(Rank(df$var) *groups)\n      t1 <- data.frame()\n      t1 <- ddply(df, .(bin), summarise, event = sum(YY), count = length(YY))\n      t2 <- ddply(df, .(bin), summarise, minVal = min(var), maxVal = max(var))\n      t2 <- subset(t2, select = c(minVal,maxVal))\n      t1 <- cbind(t1, t2)\n      t1$bin <- ifelse(is.na(t1$bin), -1, t1$bin)\n      t1$mix <- t1$count / nrow(df)\n      t1$totalevent <- sum(df$YY)\n      t1$totalnonevent <- nrow(df)-sum(df$YY)\n      t1$nonevent <- t1$count - t1$event\n      t1 <- t1[with(t1, order(bin)),]\n\n      t1$sel <- ifelse(t1$bin %in% selBin, 1, 0)\n      t1$sel2 <- with(t1, cumsum(sel))\n      setDT(t1)\n      setkey(t1, sel2)\n      t1 <- t1[with(t1, order(sel2, sel)),]\n      t1[, event := cumsum(event), by=sel2]\n      t1[, nonevent := cumsum(nonevent), by=sel2]\n      t1[, count := cumsum(count), by=sel2]\n      t1$mix <- t1$count / nrow(df)\n      t1$pctevent <- ifelse(t1$totalevent==0, 0, t1$event/t1$totalevent)\n      t1$pctnonevent <- ifelse(t1$totalnonevent==0, 0, t1$nonevent/t1$totalnonevent)\n      t1$woe <- ifelse(t1$pctnonevent==0 | t1$pctevent==0, 0,\n                       log(t1$pctevent/t1$pctnonevent))\n      t1$eventrate <- t1$event / (t1$nonevent+t1$event)\n      t1 <- within(t1, iv <- woe * (pctevent-pctnonevent))\n      t1 <- within(t1, cutpoint <- ifelse(bin == -1, \"Missing\",\n                                          paste0(\"<= \", maxVal)))\n      t1 <- subset(t1, sel == 1)\n      t1 <- subset(t1, select = c(bin, minVal, cutpoint, count, mix, eventrate,\n                                  woe, iv))\n      t1 <- t1[with(t1, order(bin)),]\n      t1 <- rename(t1, c(\"bin\" = \"Bin\", \"minVal\" = \"Min_Value\",\n                         \"cutpoint\" = \"Cutoff_Point\",\n                         \"count\" = \"Counts\", \"mix\" = \"Volume_Mix\",\n                         \"eventrate\" = \"Event_Pct\",\n                         \"woe\" = \"WOE\", \"iv\" = \"IV\"))\n      t <- sqldf(\"select NULL as Bin,\n                 NULL as Min_Value,\n                 'Total' as Cutoff_Point,\n                 sum(Counts) as Counts,\n                 sum(Volume_Mix) as Volume_Mix,\n                 sum(Event_Pct*Volume_Mix) as Event_Pct,\n                 NULL as WOE,\n                 sum(IV) as IV from t1\")\n      t1 <- rbind(t1, t)\n      gvisTable(t1,\n                formats = list('Volume_Mix'='#.#%','Event_Pct'='#.##%',\n                               'Counts'='#,###', 'Min_Value'='#,###',\n                               'WOE'='#.####', 'IV'='#.####'),\n                options = list(width=600))\n    })\n    # Print R code\n    output$code2 <- renderPrint({\n      # Reactive\n      df <- dataUpload2()\n      df$var <- df[, paste0(input$product2)]\n      selBin <- as.numeric(input$selBin)\n      # Create sumarized table\n      df$bin <- round(Rank(df$var) *groups)\n      t1 <- data.frame()\n      t1 <- ddply(df, .(bin), summarise, event = sum(YY), count = length(YY))\n      t2 <- ddply(df, .(bin), summarise, minVal = min(var), maxVal = max(var))\n      t2 <- subset(t2, select = c(minVal,maxVal))\n      t1 <- cbind(t1, t2)\n      t1$bin <- ifelse(is.na(t1$bin), -1, t1$bin)\n      t1$mix <- t1$count / nrow(df)\n      t1$totalevent <- sum(df$YY)\n      t1$totalnonevent <- nrow(df)-sum(df$YY)\n      t1$nonevent <- t1$count - t1$event\n      t1 <- t1[with(t1, order(bin)),]\n\n      t1$sel <- ifelse(t1$bin %in% selBin, 1, 0)\n      t1$sel2 <- with(t1, cumsum(sel))\n      setDT(t1)\n      setkey(t1, sel2)\n      t1 <- t1[with(t1, order(sel2, sel)),]\n      t1[, event := cumsum(event), by=sel2]\n      t1[, nonevent := cumsum(nonevent), by=sel2]\n      t1[, count := cumsum(count), by=sel2]\n      t1$mix <- t1$count / nrow(df)\n      t1$pctevent <- ifelse(t1$totalevent==0, 0, t1$event/t1$totalevent)\n      t1$pctnonevent <- ifelse(t1$totalnonevent==0, 0,\n                               t1$nonevent/t1$totalnonevent)\n      t1$woe <- ifelse(t1$pctnonevent==0 | t1$pctevent==0, 0,\n                       log(t1$pctevent/t1$pctnonevent))\n      t1 <- within(t1, iv <- woe * (pctevent-pctnonevent))\n      t1 <- within(t1, cutpoint <- ifelse(bin == -1, \" is Null\",\n                                          paste0(\"<= \", maxVal)))\n      t1 <- subset(t1, sel == 1)\n      t1 <- subset(t1, select = c(bin, minVal, cutpoint, count, mix, pctevent,\n                                  woe, iv))\n      t1 <- t1[with(t1, order(bin)),]\n      t1 <- as.data.frame(t1)\n\n      lines=nrow(t1)\n      sqlcodetable=as.list(matrix(ncol=0,nrow=0))\n      sqlcodetable=rbind(\"select case\")\n      for (k in 1:lines){\n        sqlcodetable=rbind(sqlcodetable,paste0(\"when \",\n                                               input$product2,\n                                               t1[k,3],\n                                               \" \",\n                                               \"then \",\n                                               t1[k,7]))\n      }\n      sqlcodetable=rbind(sqlcodetable,paste0(\" end as \", input$product2, \"_B\"))\n      return(gsub(\",\",\"\",toString(sqlcodetable)))\n    })\n    # Histogram\n    output$main_plot <- renderPlot({\n      # Reactive\n      df <- dataUpload3()\n      df$var <- df[, paste0(input$product3)]\n      df <- subset(df, select = c(var))\n      VarType <- class(df$var)\n      if (VarType %in% c('integer', 'numeric')) {\n        # Create Histogram\n        hist(df$var,\n             probability = TRUE,\n             breaks = as.numeric(input$n_breaks),\n             main = \"Numeric Variable Distribution\")\n\n        if (input$individual_obs) {\n          rug(df$var)\n        }\n\n        if (input$density) {\n          dens <- density(df$var,\n                          adjust = input$bw_adjust)\n          lines(dens, col = \"blue\")\n        }\n      }\n      else barplot(prop.table(table(df$var)))\n    })\n    # Download Data\n    datasetInput <- reactive({\n      switch(input$dataset,\n             \"Variable Summary\" = Vars,\n             \"Univariate Analysis\" = Univars,\n             \"Chi-Square\" = Chisq,\n             \"Stats Analysis\" = Stats,\n             \"Variable Clustering\" = Varclus)\n    })\n\n    output$table <- renderTable({\n      datasetInput()\n    })\n\n    output$downloadData <- downloadHandler(\n      filename = function() { paste(input$dataset, '.csv', sep='') },\n      content = function(file) {\n        write.csv(datasetInput(), file)\n      }\n    )\n                                  }\n\n  ui <- dashboardPage(\n    dashboardHeader(title = \"Modeling Tools\"),\n    dashboardSidebar(\n      sidebarMenu(\n        menuItem(\"Stats Explore\", tabName = \"dashboard1\",\n                 icon = icon(\"table\")),\n        menuItem(\"Variable Clustering\", tabName = \"dashboard8\",\n                 icon = icon(\"table\")),\n        menuItem(\"Log-Odds Charts (Numeric)\", tabName = \"dashboard9\",\n                 icon = icon(\"line-chart\")),\n        menuItem(\"Log-Odds Charts (Categorical)\", tabName = \"dashboard2\",\n                 icon = icon(\"bar-chart\")),\n        menuItem(\"Export\", tabName = \"dashboard10\",\n                 icon = icon(\"download\"))\n      )\n    ),\n    dashboardBody(\n      tabItems(\n        # First tab content\n        tabItem(tabName = \"dashboard1\",\n                fluidRow(tabBox(\n                  width = 10,\n                  tabPanel(\"Variable Summary\", \"\", htmlOutput(\"viewVars\"),\n                           p(\"\"),\n                           p(\"Column Legend: \"),\n                           p(class = \"text-muted\",\n                             \"N = Number of observations\"),\n                           p(class = \"text-muted\",\n                             \"NValues = Distinct values counts\"),\n                           p(class = \"text-muted\",\n                             \"MaxPct = Percent of value with highest frequncy\"),\n                           p(class = \"text-muted\",\n                             \"NMiss = Missing counts\"),\n                           p(class = \"text-muted\",\n                             \"NMissPct = Missing percent of total\"),\n                           p(class = \"text-muted\",\n                             \"NZero = Zero counts\"),\n                           p(class = \"text-muted\",\n                             \"NZeroPct = Zero percent of total\"),\n                           p(class = \"text-muted\",\n                             \"NSV = Number of Special Value\"),\n                           p(class = \"text-muted\",\n                             \"NOutlier = Number of Outliers (over 5 stdev)\")),\n                  tabPanel(\"Univariate Summary\", \"\",\n                           htmlOutput(\"viewUnivars\")),\n                  tabPanel(\"Chi-Square Summary\", \"\",\n                           htmlOutput(\"viewChisq\")),\n                  tabPanel(\"Stats Summary (Binned)\", \"\",\n                           htmlOutput(\"viewStats\"))\n                ))),\n        tabItem(tabName = \"dashboard8\",\n                fluidRow(box(width = 10, htmlOutput(\"viewVarclus\")))),\n        tabItem(tabName = \"dashboard9\",\n                fluidRow(box(width = 3,\n                             selectInput(\"product2\", \"Select Variable: \",\n                                         names(subset(df, select = c(SelVar))))),\n                         box(width = 7,\n                             selectInput('selBin', 'Remove Bins: ',\n                                         seq(-1, groups),\n                                         selected = seq(-1, groups),\n                                         multiple = TRUE, selectize = TRUE))),\n                fluidRow(box(width = 5,\n                             title = \"Log-Odds Chart\",\n                             status = \"primary\",\n                             solidHeader = TRUE,\n                             htmlOutput(\"viewLogodds2\")),\n                         box(width = 5,\n                             title = \"WOE Summary\",\n                             status = \"primary\",\n                             solidHeader = TRUE,\n                             htmlOutput(\"viewWoe2\"))),\n                fluidRow(box(width = 10,\n                             title = \"WOE Transformation SQL\",\n                             status = \"primary\",\n                             solidHeader = TRUE,\n                             verbatimTextOutput('code2')))\n        ),\n        tabItem(tabName = \"dashboard2\",\n                fluidRow(box(width = 3,\n                             selectInput(\"product\",\n                                         \"Select Variable: \",\n                                         names(subset(df,\n                                                      select = c(SelVarC)))))),\n                fluidRow(box(width = 5,\n                             title = \"Log-Odds Chart\",\n                             status = \"primary\",\n                             solidHeader = TRUE,\n                             htmlOutput(\"viewLogodds\")),\n                         box(width = 5,\n                             title = \"WOE Summary\",\n                             status = \"primary\",\n                             solidHeader = TRUE,\n                             htmlOutput(\"viewWoe\"))),\n                fluidRow(box(width = 10,\n                             title = \"WOE Transformation SQL\",\n                             status = \"primary\",\n                             solidHeader = TRUE,\n                             verbatimTextOutput('code')))\n        ),\n        tabItem(tabName = \"dashboard10\",\n                pageWithSidebar(\n                  headerPanel('Export to CSV'),\n                  sidebarPanel(\n                    selectInput(\"dataset\", \"Choose a dataset:\",\n                                choices = c(\"Variable Summary\",\n                                            \"Univariate Analysis\",\n                                            \"Chi-Square\",\n                                            \"Stats Analysis\",\n                                            \"Variable Clustering\")),\n                    downloadButton('downloadData', 'Download')\n                  ),\n                  mainPanel(\n                    tableOutput('table')\n                  )\n                ))\n      ),\n      # Second tab content\n      tabItem(tabName = \"widgets\",\n              h2(\"Widgets tab content\")\n      )\n    )\n  )\n  shinyApp(ui = ui, server = server)\n  }\n",
    "created" : 1452811608386.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1492538817",
    "id" : "E7C2A373",
    "lastKnownWriteTime" : 1452825917,
    "path" : "~/Documents/Dropbox/R/Packages/varexplore/R/varexplore.R",
    "project_path" : "R/varexplore.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}